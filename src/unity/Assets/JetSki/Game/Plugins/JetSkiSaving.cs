// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: jet_ski_saving.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace JetSkiProto {

  /// <summary>Holder for reflection information generated from jet_ski_saving.proto</summary>
  public static partial class JetSkiSavingReflection {

    #region Descriptor
    /// <summary>File descriptor for jet_ski_saving.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static JetSkiSavingReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChRqZXRfc2tpX3NhdmluZy5wcm90bxIHamV0X3NraRoTamV0X3NraV90eXBl",
            "cy5wcm90byKOAgoLU2F2ZU1lc3NhZ2USEwoLcGxheWVyX25hbWUYASABKAkS",
            "DAoEZHVkZRgCIAEoCRIUCgxza2luX3ByaW1hcnkYAyABKAkSFgoOc2tpbl9z",
            "ZWNvbmRhcnkYBCABKAkSCgoCeHAYBSABKA0SDQoFbGV2ZWwYBiABKA0SDQoF",
            "Z29hbHMYByABKA0SDQoFc2F2ZXMYCCABKA0SFAoMZ2FtZXNfcGxheWVkGAkg",
            "ASgNEhEKCWdhbWVzX3dvbhgKIAEoDRILCgNtbXIYCyABKAISFQoNcmFua19z",
            "dGFuZGFyZBgMIAEoDRIUCgxyYW5rX2RvdWJsZXMYDSABKA0SEgoKcmFua19x",
            "dWFkcxgOIAEoDSLOAgoNUmVwbGF5TWVzc2FnZRIKCgJpZBgBIAEoDRIMCgRu",
            "YW1lGAIgASgJEg4KBmxlbmd0aBgDIAEoDRJEChFyZXBsYXlfc3RhdGVfbXNn",
            "cxgEIAMoCzIpLmpldF9za2kuUmVwbGF5TWVzc2FnZS5SZXBsYXlTdGF0ZU1l",
            "c3NhZ2UazAEKElJlcGxheVN0YXRlTWVzc2FnZRIKCgJpZBgBIAEoDRIVCg1k",
            "ZWxpdmVyeV90aW1lGAIgASgCEhMKC3RpY2tfbnVtYmVyGAMgASgNEiQKCHBv",
            "c2l0aW9uGAQgASgLMhIuamV0X3NraS5NeVZlY3RvcjMSJwoIcm90YXRpb24Y",
            "BSABKAsyFS5qZXRfc2tpLk15UXVhdGVybmlvbhIWCg53YXRlcl9ib29zdGlu",
            "ZxgGIAEoCBIXCg9yb2NrZXRfYm9vc3RpbmcYByABKAhCDqoCC0pldFNraVBy",
            "b3RvYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::JetSkiProto.JetSkiTypesReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::JetSkiProto.SaveMessage), global::JetSkiProto.SaveMessage.Parser, new[]{ "PlayerName", "Dude", "SkinPrimary", "SkinSecondary", "Xp", "Level", "Goals", "Saves", "GamesPlayed", "GamesWon", "Mmr", "RankStandard", "RankDoubles", "RankQuads" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::JetSkiProto.ReplayMessage), global::JetSkiProto.ReplayMessage.Parser, new[]{ "Id", "Name", "Length", "ReplayStateMsgs" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::JetSkiProto.ReplayMessage.Types.ReplayStateMessage), global::JetSkiProto.ReplayMessage.Types.ReplayStateMessage.Parser, new[]{ "Id", "DeliveryTime", "TickNumber", "Position", "Rotation", "WaterBoosting", "RocketBoosting" }, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class SaveMessage : pb::IMessage<SaveMessage> {
    private static readonly pb::MessageParser<SaveMessage> _parser = new pb::MessageParser<SaveMessage>(() => new SaveMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SaveMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::JetSkiProto.JetSkiSavingReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SaveMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SaveMessage(SaveMessage other) : this() {
      playerName_ = other.playerName_;
      dude_ = other.dude_;
      skinPrimary_ = other.skinPrimary_;
      skinSecondary_ = other.skinSecondary_;
      xp_ = other.xp_;
      level_ = other.level_;
      goals_ = other.goals_;
      saves_ = other.saves_;
      gamesPlayed_ = other.gamesPlayed_;
      gamesWon_ = other.gamesWon_;
      mmr_ = other.mmr_;
      rankStandard_ = other.rankStandard_;
      rankDoubles_ = other.rankDoubles_;
      rankQuads_ = other.rankQuads_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SaveMessage Clone() {
      return new SaveMessage(this);
    }

    /// <summary>Field number for the "player_name" field.</summary>
    public const int PlayerNameFieldNumber = 1;
    private string playerName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerName {
      get { return playerName_; }
      set {
        playerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "dude" field.</summary>
    public const int DudeFieldNumber = 2;
    private string dude_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Dude {
      get { return dude_; }
      set {
        dude_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "skin_primary" field.</summary>
    public const int SkinPrimaryFieldNumber = 3;
    private string skinPrimary_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SkinPrimary {
      get { return skinPrimary_; }
      set {
        skinPrimary_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "skin_secondary" field.</summary>
    public const int SkinSecondaryFieldNumber = 4;
    private string skinSecondary_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SkinSecondary {
      get { return skinSecondary_; }
      set {
        skinSecondary_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "xp" field.</summary>
    public const int XpFieldNumber = 5;
    private uint xp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Xp {
      get { return xp_; }
      set {
        xp_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 6;
    private uint level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "goals" field.</summary>
    public const int GoalsFieldNumber = 7;
    private uint goals_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Goals {
      get { return goals_; }
      set {
        goals_ = value;
      }
    }

    /// <summary>Field number for the "saves" field.</summary>
    public const int SavesFieldNumber = 8;
    private uint saves_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Saves {
      get { return saves_; }
      set {
        saves_ = value;
      }
    }

    /// <summary>Field number for the "games_played" field.</summary>
    public const int GamesPlayedFieldNumber = 9;
    private uint gamesPlayed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GamesPlayed {
      get { return gamesPlayed_; }
      set {
        gamesPlayed_ = value;
      }
    }

    /// <summary>Field number for the "games_won" field.</summary>
    public const int GamesWonFieldNumber = 10;
    private uint gamesWon_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GamesWon {
      get { return gamesWon_; }
      set {
        gamesWon_ = value;
      }
    }

    /// <summary>Field number for the "mmr" field.</summary>
    public const int MmrFieldNumber = 11;
    private float mmr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Mmr {
      get { return mmr_; }
      set {
        mmr_ = value;
      }
    }

    /// <summary>Field number for the "rank_standard" field.</summary>
    public const int RankStandardFieldNumber = 12;
    private uint rankStandard_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RankStandard {
      get { return rankStandard_; }
      set {
        rankStandard_ = value;
      }
    }

    /// <summary>Field number for the "rank_doubles" field.</summary>
    public const int RankDoublesFieldNumber = 13;
    private uint rankDoubles_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RankDoubles {
      get { return rankDoubles_; }
      set {
        rankDoubles_ = value;
      }
    }

    /// <summary>Field number for the "rank_quads" field.</summary>
    public const int RankQuadsFieldNumber = 14;
    private uint rankQuads_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RankQuads {
      get { return rankQuads_; }
      set {
        rankQuads_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SaveMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SaveMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerName != other.PlayerName) return false;
      if (Dude != other.Dude) return false;
      if (SkinPrimary != other.SkinPrimary) return false;
      if (SkinSecondary != other.SkinSecondary) return false;
      if (Xp != other.Xp) return false;
      if (Level != other.Level) return false;
      if (Goals != other.Goals) return false;
      if (Saves != other.Saves) return false;
      if (GamesPlayed != other.GamesPlayed) return false;
      if (GamesWon != other.GamesWon) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Mmr, other.Mmr)) return false;
      if (RankStandard != other.RankStandard) return false;
      if (RankDoubles != other.RankDoubles) return false;
      if (RankQuads != other.RankQuads) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerName.Length != 0) hash ^= PlayerName.GetHashCode();
      if (Dude.Length != 0) hash ^= Dude.GetHashCode();
      if (SkinPrimary.Length != 0) hash ^= SkinPrimary.GetHashCode();
      if (SkinSecondary.Length != 0) hash ^= SkinSecondary.GetHashCode();
      if (Xp != 0) hash ^= Xp.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (Goals != 0) hash ^= Goals.GetHashCode();
      if (Saves != 0) hash ^= Saves.GetHashCode();
      if (GamesPlayed != 0) hash ^= GamesPlayed.GetHashCode();
      if (GamesWon != 0) hash ^= GamesWon.GetHashCode();
      if (Mmr != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Mmr);
      if (RankStandard != 0) hash ^= RankStandard.GetHashCode();
      if (RankDoubles != 0) hash ^= RankDoubles.GetHashCode();
      if (RankQuads != 0) hash ^= RankQuads.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PlayerName);
      }
      if (Dude.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Dude);
      }
      if (SkinPrimary.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(SkinPrimary);
      }
      if (SkinSecondary.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(SkinSecondary);
      }
      if (Xp != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Xp);
      }
      if (Level != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Level);
      }
      if (Goals != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(Goals);
      }
      if (Saves != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(Saves);
      }
      if (GamesPlayed != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(GamesPlayed);
      }
      if (GamesWon != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(GamesWon);
      }
      if (Mmr != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(Mmr);
      }
      if (RankStandard != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(RankStandard);
      }
      if (RankDoubles != 0) {
        output.WriteRawTag(104);
        output.WriteUInt32(RankDoubles);
      }
      if (RankQuads != 0) {
        output.WriteRawTag(112);
        output.WriteUInt32(RankQuads);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerName);
      }
      if (Dude.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Dude);
      }
      if (SkinPrimary.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SkinPrimary);
      }
      if (SkinSecondary.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SkinSecondary);
      }
      if (Xp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Xp);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
      }
      if (Goals != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Goals);
      }
      if (Saves != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Saves);
      }
      if (GamesPlayed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GamesPlayed);
      }
      if (GamesWon != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GamesWon);
      }
      if (Mmr != 0F) {
        size += 1 + 4;
      }
      if (RankStandard != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RankStandard);
      }
      if (RankDoubles != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RankDoubles);
      }
      if (RankQuads != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RankQuads);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SaveMessage other) {
      if (other == null) {
        return;
      }
      if (other.PlayerName.Length != 0) {
        PlayerName = other.PlayerName;
      }
      if (other.Dude.Length != 0) {
        Dude = other.Dude;
      }
      if (other.SkinPrimary.Length != 0) {
        SkinPrimary = other.SkinPrimary;
      }
      if (other.SkinSecondary.Length != 0) {
        SkinSecondary = other.SkinSecondary;
      }
      if (other.Xp != 0) {
        Xp = other.Xp;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.Goals != 0) {
        Goals = other.Goals;
      }
      if (other.Saves != 0) {
        Saves = other.Saves;
      }
      if (other.GamesPlayed != 0) {
        GamesPlayed = other.GamesPlayed;
      }
      if (other.GamesWon != 0) {
        GamesWon = other.GamesWon;
      }
      if (other.Mmr != 0F) {
        Mmr = other.Mmr;
      }
      if (other.RankStandard != 0) {
        RankStandard = other.RankStandard;
      }
      if (other.RankDoubles != 0) {
        RankDoubles = other.RankDoubles;
      }
      if (other.RankQuads != 0) {
        RankQuads = other.RankQuads;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PlayerName = input.ReadString();
            break;
          }
          case 18: {
            Dude = input.ReadString();
            break;
          }
          case 26: {
            SkinPrimary = input.ReadString();
            break;
          }
          case 34: {
            SkinSecondary = input.ReadString();
            break;
          }
          case 40: {
            Xp = input.ReadUInt32();
            break;
          }
          case 48: {
            Level = input.ReadUInt32();
            break;
          }
          case 56: {
            Goals = input.ReadUInt32();
            break;
          }
          case 64: {
            Saves = input.ReadUInt32();
            break;
          }
          case 72: {
            GamesPlayed = input.ReadUInt32();
            break;
          }
          case 80: {
            GamesWon = input.ReadUInt32();
            break;
          }
          case 93: {
            Mmr = input.ReadFloat();
            break;
          }
          case 96: {
            RankStandard = input.ReadUInt32();
            break;
          }
          case 104: {
            RankDoubles = input.ReadUInt32();
            break;
          }
          case 112: {
            RankQuads = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReplayMessage : pb::IMessage<ReplayMessage> {
    private static readonly pb::MessageParser<ReplayMessage> _parser = new pb::MessageParser<ReplayMessage>(() => new ReplayMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReplayMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::JetSkiProto.JetSkiSavingReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplayMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplayMessage(ReplayMessage other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      length_ = other.length_;
      replayStateMsgs_ = other.replayStateMsgs_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplayMessage Clone() {
      return new ReplayMessage(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "length" field.</summary>
    public const int LengthFieldNumber = 3;
    private uint length_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Length {
      get { return length_; }
      set {
        length_ = value;
      }
    }

    /// <summary>Field number for the "replay_state_msgs" field.</summary>
    public const int ReplayStateMsgsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::JetSkiProto.ReplayMessage.Types.ReplayStateMessage> _repeated_replayStateMsgs_codec
        = pb::FieldCodec.ForMessage(34, global::JetSkiProto.ReplayMessage.Types.ReplayStateMessage.Parser);
    private readonly pbc::RepeatedField<global::JetSkiProto.ReplayMessage.Types.ReplayStateMessage> replayStateMsgs_ = new pbc::RepeatedField<global::JetSkiProto.ReplayMessage.Types.ReplayStateMessage>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::JetSkiProto.ReplayMessage.Types.ReplayStateMessage> ReplayStateMsgs {
      get { return replayStateMsgs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReplayMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReplayMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (Length != other.Length) return false;
      if(!replayStateMsgs_.Equals(other.replayStateMsgs_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Length != 0) hash ^= Length.GetHashCode();
      hash ^= replayStateMsgs_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Length != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Length);
      }
      replayStateMsgs_.WriteTo(output, _repeated_replayStateMsgs_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Length);
      }
      size += replayStateMsgs_.CalculateSize(_repeated_replayStateMsgs_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReplayMessage other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Length != 0) {
        Length = other.Length;
      }
      replayStateMsgs_.Add(other.replayStateMsgs_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            Length = input.ReadUInt32();
            break;
          }
          case 34: {
            replayStateMsgs_.AddEntriesFrom(input, _repeated_replayStateMsgs_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ReplayMessage message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class ReplayStateMessage : pb::IMessage<ReplayStateMessage> {
        private static readonly pb::MessageParser<ReplayStateMessage> _parser = new pb::MessageParser<ReplayStateMessage>(() => new ReplayStateMessage());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ReplayStateMessage> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::JetSkiProto.ReplayMessage.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ReplayStateMessage() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ReplayStateMessage(ReplayStateMessage other) : this() {
          id_ = other.id_;
          deliveryTime_ = other.deliveryTime_;
          tickNumber_ = other.tickNumber_;
          position_ = other.position_ != null ? other.position_.Clone() : null;
          rotation_ = other.rotation_ != null ? other.rotation_.Clone() : null;
          waterBoosting_ = other.waterBoosting_;
          rocketBoosting_ = other.rocketBoosting_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ReplayStateMessage Clone() {
          return new ReplayStateMessage(this);
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private uint id_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Id {
          get { return id_; }
          set {
            id_ = value;
          }
        }

        /// <summary>Field number for the "delivery_time" field.</summary>
        public const int DeliveryTimeFieldNumber = 2;
        private float deliveryTime_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float DeliveryTime {
          get { return deliveryTime_; }
          set {
            deliveryTime_ = value;
          }
        }

        /// <summary>Field number for the "tick_number" field.</summary>
        public const int TickNumberFieldNumber = 3;
        private uint tickNumber_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint TickNumber {
          get { return tickNumber_; }
          set {
            tickNumber_ = value;
          }
        }

        /// <summary>Field number for the "position" field.</summary>
        public const int PositionFieldNumber = 4;
        private global::JetSkiProto.MyVector3 position_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::JetSkiProto.MyVector3 Position {
          get { return position_; }
          set {
            position_ = value;
          }
        }

        /// <summary>Field number for the "rotation" field.</summary>
        public const int RotationFieldNumber = 5;
        private global::JetSkiProto.MyQuaternion rotation_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::JetSkiProto.MyQuaternion Rotation {
          get { return rotation_; }
          set {
            rotation_ = value;
          }
        }

        /// <summary>Field number for the "water_boosting" field.</summary>
        public const int WaterBoostingFieldNumber = 6;
        private bool waterBoosting_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool WaterBoosting {
          get { return waterBoosting_; }
          set {
            waterBoosting_ = value;
          }
        }

        /// <summary>Field number for the "rocket_boosting" field.</summary>
        public const int RocketBoostingFieldNumber = 7;
        private bool rocketBoosting_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool RocketBoosting {
          get { return rocketBoosting_; }
          set {
            rocketBoosting_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ReplayStateMessage);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ReplayStateMessage other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Id != other.Id) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DeliveryTime, other.DeliveryTime)) return false;
          if (TickNumber != other.TickNumber) return false;
          if (!object.Equals(Position, other.Position)) return false;
          if (!object.Equals(Rotation, other.Rotation)) return false;
          if (WaterBoosting != other.WaterBoosting) return false;
          if (RocketBoosting != other.RocketBoosting) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Id != 0) hash ^= Id.GetHashCode();
          if (DeliveryTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DeliveryTime);
          if (TickNumber != 0) hash ^= TickNumber.GetHashCode();
          if (position_ != null) hash ^= Position.GetHashCode();
          if (rotation_ != null) hash ^= Rotation.GetHashCode();
          if (WaterBoosting != false) hash ^= WaterBoosting.GetHashCode();
          if (RocketBoosting != false) hash ^= RocketBoosting.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Id != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Id);
          }
          if (DeliveryTime != 0F) {
            output.WriteRawTag(21);
            output.WriteFloat(DeliveryTime);
          }
          if (TickNumber != 0) {
            output.WriteRawTag(24);
            output.WriteUInt32(TickNumber);
          }
          if (position_ != null) {
            output.WriteRawTag(34);
            output.WriteMessage(Position);
          }
          if (rotation_ != null) {
            output.WriteRawTag(42);
            output.WriteMessage(Rotation);
          }
          if (WaterBoosting != false) {
            output.WriteRawTag(48);
            output.WriteBool(WaterBoosting);
          }
          if (RocketBoosting != false) {
            output.WriteRawTag(56);
            output.WriteBool(RocketBoosting);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Id != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
          }
          if (DeliveryTime != 0F) {
            size += 1 + 4;
          }
          if (TickNumber != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TickNumber);
          }
          if (position_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
          }
          if (rotation_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rotation);
          }
          if (WaterBoosting != false) {
            size += 1 + 1;
          }
          if (RocketBoosting != false) {
            size += 1 + 1;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ReplayStateMessage other) {
          if (other == null) {
            return;
          }
          if (other.Id != 0) {
            Id = other.Id;
          }
          if (other.DeliveryTime != 0F) {
            DeliveryTime = other.DeliveryTime;
          }
          if (other.TickNumber != 0) {
            TickNumber = other.TickNumber;
          }
          if (other.position_ != null) {
            if (position_ == null) {
              position_ = new global::JetSkiProto.MyVector3();
            }
            Position.MergeFrom(other.Position);
          }
          if (other.rotation_ != null) {
            if (rotation_ == null) {
              rotation_ = new global::JetSkiProto.MyQuaternion();
            }
            Rotation.MergeFrom(other.Rotation);
          }
          if (other.WaterBoosting != false) {
            WaterBoosting = other.WaterBoosting;
          }
          if (other.RocketBoosting != false) {
            RocketBoosting = other.RocketBoosting;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Id = input.ReadUInt32();
                break;
              }
              case 21: {
                DeliveryTime = input.ReadFloat();
                break;
              }
              case 24: {
                TickNumber = input.ReadUInt32();
                break;
              }
              case 34: {
                if (position_ == null) {
                  position_ = new global::JetSkiProto.MyVector3();
                }
                input.ReadMessage(position_);
                break;
              }
              case 42: {
                if (rotation_ == null) {
                  rotation_ = new global::JetSkiProto.MyQuaternion();
                }
                input.ReadMessage(rotation_);
                break;
              }
              case 48: {
                WaterBoosting = input.ReadBool();
                break;
              }
              case 56: {
                RocketBoosting = input.ReadBool();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
