syntax = "proto3";
package jet_ski;
import "jet_ski_types.proto";
import "jet_ski_saving.proto";
option csharp_namespace = "JetSkiProto";

//client: here's my name, can I join?
message JoinServerMessage {
    string name = 1;
}

//server: ok here's your id, load this arena, and wait at this spot with the ball and whoever else is in there
message AcceptJoinMessage {
    uint32 id = 1;
    string arena = 2;
    uint32 team = 3;
    MyVector3 position = 4;
    MyQuaternion rotation = 5;
    repeated NewPlayerMessage new_player_msg = 6;
}

//server: everybody here's another client
message NewPlayerMessage {
    uint32 id = 1;
    string name = 2;
    uint32 team = 3;
    MyVector3 position = 4;
    MyQuaternion rotation = 5;
}

//server: let's start
message StartGameMessage {
}

//this may be useless
message AckMessage {
    uint32 id = 1;
}

//game didn't start yet if we're sending these around
message GameOffMessage {
    oneof game_off {
        JoinServerMessage join_server_msg = 1;
        AcceptJoinMessage accept_join_msg = 2;
        NewPlayerMessage new_player_msg = 3;
        StartGameMessage start_game_msg = 4;
        ReplayMessage replay_msg = 5;
        SaveMessage save_msg = 6;
        AckMessage ack_msg = 7;
    }
}

//client shoots inputs at the server at over 9000 times per minute
message InputMessage {
    uint32 id = 1;
    float delivery_time = 2;
    uint32 start_tick_number = 3;
    message Inputs {
        float forward = 1;
        float sideways = 2;
        bool water_boosting = 3;
        bool rocket_boosting = 4;
    }
    repeated Inputs inputs = 4;
}

//server tosses over states to clients
message StateMessage {
    uint32 id = 1;
    float delivery_time = 2;
    uint32 tick_number = 3;
    MyVector3 position = 4;
    MyQuaternion rotation = 5;
    MyVector3 velocity = 6;
    MyVector3 angular_velocity = 7;
    bool water_boosting = 8;
    bool rocket_boosting = 9;
}

//server: time out, I'll let you know when to start again
message ScoreMessage {
    uint32 id = 1;
    uint32 score = 2;
    string name = 3;
    uint32 team = 4;
}

//server: game over, here's the winning team
message StopGameMessage {
    uint32 team = 1;
}

//game is underway if we're sending these around
message GameOnMessage {
    oneof game_on {
        InputMessage client_input_msg = 1;
        StateMessage server_state_msg = 2;
        ScoreMessage score_msg = 3;
        StopGameMessage stop_game_msg = 4;
        ReplayMessage replay_msg = 5;
        AckMessage ack_msg = 6;
    }
}